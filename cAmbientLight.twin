
Class cAmbientLight
/*
Using Sensors in twinBASIC through ISensor
Ambient Light Monitor v1.0
by Jon Johnson (fafalone)
    
Main Class; see main Form for general readme.

This is the management class; it's responsible for retrieving all ambient
light sensors and adding/removing them as sources for the cSensorEvents
class, which receives events generated by the sensor, processes the data,
and raises an event to this class that's forward to the host form, that way
the host form only has this single class to deal with. The final value is an
average of the last data reports from each sensor (if more than one).
    
*/
Implements ISensorManagerEvents

Public Event AmbientLightChanged(ByVal fLux As Single)

Private pManager As SensorManager
Private WithEvents pEvents As cSensorEvents 'class that implements ISensorEvents

Private Type SensorInst
    id As UUID
    pSensor As ISensor
End Type
Private SensorGroup() As SensorInst
Private nSensors As Long


Private Sub Class_Initialize()
    Set pEvents = New cSensorEvents(Me)
End Sub

Private Sub pEvents_Update(ByVal fLux As Single) Handles pEvents.Update
    RaiseEvent AmbientLightChanged(fLux)
End Sub

Public Function Initialize() As Long
    On Error GoTo e0
    Dim hr As Long
    Set pManager = New SensorManager
    If pManager IsNot Nothing Then
        pManager.SetEventSink(Me)
        Dim spSensors As ISensorCollection
        pManager.GetSensorsByType(SENSOR_TYPE_AMBIENT_LIGHT, spSensors)
        If spSensors IsNot Nothing Then
            Dim count As Long
            spSensors.GetCount(count)
            Dim i As Long
            For i = 0 To count - 1
                Dim spSensor As ISensor
                spSensors.GetAt i, spSensor
                hr = AddSensor(spSensor)
                If SUCCEEDED(hr) Then
                    hr = pEvents.GetSensorData(spSensor)
                    Return hr
                End If
            Next
        End If
    End If
    
    Exit Function
    e0: 
    Debug.Print CurrentComponentName & "::" & CurrentProcedureName & " error=0x" & Hex$(Err.Number) & ", " & Err.Description
    Return Err.Number
End Function

Public Function Uninitialize() As Long
    Dim hr As Long
    If nSensors Then
        Dim i As Long
        For i = 0 To UBound(SensorGroup)
            RemoveSensor(SensorGroup(i).pSensor)
        Next
    End If
    If pManager IsNot Nothing Then
        pManager.SetEventSink(Nothing)
    End If
    Return Err.LastHresult
End Function
    

Private Function AddSensor(ByVal pSensor As ISensor) As Long
    On Error GoTo e0
    If pSensor IsNot Nothing Then 
        pSensor.SetEventSink(pEvents)
        ReDim Preserve SensorGroup(nSensors)
        pSensor.GetId SensorGroup(nSensors).id
        Set SensorGroup(nSensors).pSensor = pSensor
        nSensors += 1
        Return S_OK
    Else
        Return E_POINTER
    End If
    e0:
    Debug.Print CurrentComponentName & "::" & CurrentProcedureName & " error=0x" & Hex$(Err.Number) & ", " & Err.Description
    Return Err.Number
End Function

Public Function RemoveSensor(ByVal pSensor As ISensor) As Long
    On Error GoTo e0
    If pSensor IsNot Nothing Then
        pSensor.SetEventSink(Nothing)
        Dim idSensor As UUID
        pSensor.GetId idSensor
        Dim i As Long
        For i = 0 To UBound(SensorGroup)
            If IsEqualIID(idSensor, SensorGroup(i).id) Then
                Set SensorGroup(i).pSensor = Nothing
                Set pSensor = Nothing
                Return S_OK
            End If
        Next
        Return HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
    Else
        Return E_POINTER
    End If
    
    Exit Function
e0: 
    Debug.Print CurrentComponentName & "::" & CurrentProcedureName & " error=0x" & Hex$(Err.Number) & ", " & Err.Description
    Return Err.Number
End Function
Public Function RemoveSensor(idSensor As UUID) As Long
    On Error GoTo e0
    Dim i As Long
    For i = 0 To UBound(SensorGroup)
        If IsEqualIID(idSensor, SensorGroup(i).id) Then
            Set SensorGroup(i).pSensor = Nothing
            Return S_OK
        End If
    Next
    Return HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
e0: 
    Debug.Print CurrentComponentName & "::" & CurrentProcedureName & " error=0x" & Hex$(Err.Number) & ", " & Err.Description
    Return Err.Number
End Function
Private Sub ISensorManagerEvents_OnSensorEnter(ByVal pSensor As ISensor, ByVal State As SensorState) Implements ISensorManagerEvents.OnSensorEnter
    On Error Resume Next
    Dim hr As Long
    If pSensor IsNot Nothing Then
        Dim idType As UUID
        pSensor.GetType(idType)
        hr = Err.LastHresult
        If SUCCEEDED(hr) Then
            If IsEqualIID(idType, SENSOR_TYPE_AMBIENT_LIGHT) Then
                hr = AddSensor(pSensor)
                If hr = S_OK Then
                    If State = SENSOR_STATE_READY Then
                        pEvents.GetSensorData(pSensor)
                    End If
                End If
            End If
        End If
    End If
    Err.ReturnHResult = hr
End Sub

End Class

[COMCreatable(False)]
Class cSensorEvents
    Implements ISensorEvents
    
    Public Event Update(ByVal fLux As Single)
    
    Private Type LuxValue
        idSensor As UUID
        fValue As Single
    End Type
    Private LuxValues() As LuxValue
    Private nSensors As Long
    
    Private mParent As cAmbientLight
    
    Sub New(ByVal pPar As cAmbientLight)
        Set mParent = pPar
    End Sub
    
    Private Sub ISensorEvents_OnStateChanged(ByVal pSensor As ISensor, ByVal State As SensorState) Implements ISensorEvents.OnStateChanged
        On Error Resume Next
        Dim hr As Long
        If pSensor IsNot Nothing Then
            Dim idSensor As UUID
            pSensor.GetId idSensor
            hr = Err.LastHresult
            If SUCCEEDED(hr) Then
                If State = SENSOR_STATE_READY Then
                    hr = GetSensorData(pSensor)
                Else
                    MapLux idSensor, -1.0
                    hr = UpdateLux()
                End If
            End If
        Else
            hr = E_POINTER
        End If
        Err.ReturnHResult = hr
    End Sub
    
    Private Sub ISensorEvents_OnDataUpdated(ByVal pSensor As ISensor, ByVal pNewData As ISensorDataReport) Implements ISensorEvents.OnDataUpdated
        If (pSensor IsNot Nothing) And (pNewData IsNot Nothing) Then
            Err.ReturnHResult = GetSensorData(pSensor, pNewData)
        Else
            Err.ReturnHResult = E_UNEXPECTED
        End If
    End Sub
    
    Private Sub ISensorEvents_OnEvent(ByVal pSensor As ISensor, eventId As UUID, ByVal pEventData As IPortableDeviceValues) Implements ISensorEvents.OnEvent
        Err.ReturnHResult = E_NOTIMPL
    End Sub
    
    Private Sub ISensorEvents_OnLeave(id As UUID) Implements ISensorEvents.OnLeave
        On Error Resume Next
        Dim hr As Long = mParent.RemoveSensor(id)
        On Error GoTo e0
        If SUCCEEDED(hr) Then
            If nSensors Then
                If nSensors = 1 Then
                    Erase LuxValues
                Else
                    Dim tmpVal() As LuxValue
                    ReDim tmpVal(UBound(LuxValues) - 1)
                    Dim i As Long, j As Long
                    For i = 0 To UBound(LuxValues)
                        If IsEqualIID(LuxValues(i).idSensor, id) = CFALSE Then
                            tmpVal(j) = LuxValues(i)
                            j += 1
                        End If
                    Next
                    LuxValues = tmpVal
                End If
            End If
        End If
        Err.ReturnHResult = hr
        Exit Sub
        e0: 
            Debug.Print CurrentComponentName & "::" & CurrentProcedureName & " error=0x" & Hex$(Err.Number) & ", " & Err.Description
            Exit Sub
    End Sub
    
    Public Function GetSensorData(ByVal pSensor As ISensor) As Long
        On Error Resume Next 'it's just easier to follow the C++ code handling errors manually
        Dim hr As Long
        If pSensor IsNot Nothing Then
            Dim spDataReport As ISensorDataReport
            pSensor.GetData(spDataReport)
            hr = Err.LastHresult
            If SUCCEEDED(hr) Then
                hr = GetSensorData(pSensor, spDataReport)
            Else
                Dim idSensor As UUID
                pSensor.GetId idSensor
                hr = Err.LastHresult
                If SUCCEEDED(hr) Then
                    MapLux idSensor, -1.0
                    Return UpdateLux()
                End If
            End If
        Else
            hr = E_POINTER
        End If
        Return hr
    End Function
    Public Function GetSensorData(ByVal pSensor As ISensor, ByVal pDataReport As ISensorDataReport) As Long
        On Error Resume Next
        If (pSensor IsNot Nothing) And (pDataReport IsNot Nothing) Then
            Dim idSensor As UUID
            pSensor.GetId idSensor
            If SUCCEEDED(Err.LastHresult) Then
                Dim pvLux As Variant
                PropVariantInit pvLux
                pDataReport.GetSensorValue(SENSOR_DATA_TYPE_LIGHT_LEVEL_LUX, pvLux)
                If SUCCEEDED(Err.LastHresult) Then
                    MapLux idSensor, CSng(pvLux)
                    Return UpdateLux()
                End If
            End If
            Return Err.LastHresult
        Else
            Return E_INVALIDARG
        End If
    End Function
    
    'Missing from current WinDevLib; you can remove it after the next update.
    Private Sub PropVariantInit(pv As Variant)
        ZeroMemory ByVal VarPtr(pv), LenB(Of Variant)
    End Sub
    
    Private Sub MapLux(id As UUID, value As Single)
        Dim i As Long
        If nSensors Then
            For i = 0 To UBound(LuxValues)
                If IsEqualIID(id, LuxValues(i).idSensor) Then
                    LuxValues(i).fValue = value
                    Exit Sub
                End If
            Next
        End If
        ReDim Preserve LuxValues(nSensors)
        LuxValues(nSensors).idSensor = id
        LuxValues(nSensors).fValue = value
        nSensors += 1
    End Sub
    Private Function UpdateLux() As Long
        On Error GoTo e0
        
        Dim fpLux As Single
        Dim fpLuxTemp As Single
        Dim count As Single
        Dim i As Long
        If nSensors Then
            For i = 0 To UBound(LuxValues)
                fpLuxTemp = LuxValues(i).fValue
                If fpLuxTemp >= 0 Then
                    count += 1
                    fpLux += fpLuxTemp
                End If
            Next
        End If
        If count > 0 Then
            fpLux = fpLux / count
            RaiseEvent Update(fpLux)
        End If
        
        Exit Function
    e0: 
        Debug.Print CurrentComponentName & "::" & CurrentProcedureName & " error=0x" & Hex$(Err.Number) & ", " & Err.Description
        Return Err.Number
    End Function
End Class